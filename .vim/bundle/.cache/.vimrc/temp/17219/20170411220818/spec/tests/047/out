    let s:stops_str = s:ReplaceAll(s:stops_str, '\(<.\{-}b\)')
    " replace all opened tags to t___e
    " note: save end of tag as 'e' to fix vim wrong selection 
    " (see tests #43-#44)
    let s:stops_str = substitute(s:stops_str, '\(<.\{-}>\)', '\="t".repeat("_", strlen(submatch(1)) - 2)."e"', 'g')
    " replace all closed tags to r____ ('c' is '</')
    let s:stops_str = substitute(s:stops_str, '\(c.\{-}>\)', '\="r".repeat("_", strlen(submatch(1)) - 1)', 'g')
    " replace all matched tags <...>...</...> e.g. <div>...</div>
    let s:stops_str = s:ReplaceAll(s:stops_str, '\(t[^t]\{-}e[^e]\{-}r\)')
    call s:ApplyPairs()
endfunction

"apply select/delete/change for text between first pair symbol in the stack
function! s:ApplyPairs()
    "catch maxfuncdepth exception
    try
        "get first unpair symbol from stack
        let stop = s:GetFromStack()
        let current_position = { 'line': line('.'), 'col': col('.') }
     
        "if this is opened symbol e.g. (, [, {
        if type(stop) == type({}) && (has_key(s:targets, stop.symbol) || stop.symbol == 't')
            "remove this symbol from stack
            call s:RemoveLastFromStack()
            "save line with this symbol
            let line = getline(stop.line)
            "apply command (select/delete etc)
            call s:GoTo(stop.line, stop.col)
            call s:ApplyCommand(s:type, s:mod, stop.symbol)

            "check whether something was changed
            "if we apply select then cursor position should be changed
            "if we apply delete/change then line should be changed
            "
            "But also changes/selection can be wrong. 
            "Currently we found several cases for tags. Apply for those
            "cases special trick: if after changes cursor is placed before
            "end of tag (<div _>) then last operation was wrong
            let ln = line('.')
            let col = col('.')
            if (stop.symbol != 't' && stop.line == ln && stop.col == col && line == getline('.'))
                \ || (stop.symbol == 't' && (stop.end_line > ln || (stop.end_line == ln && stop.end_col > col))) "trick for tags
                "undo last change/delete operation
                if s:type == 'c' || s:type == 'd'
                    execute "normal! \eu"
                endif
                "replace cursor to the old position
                call s:GoTo(current_position.line, current_position.col)
                "restore last applied selection
                if s:type == 'v' && exists('s:laststop')
                    call s:ApplyCommand('v', s:mod, s:laststop.symbol)
                endif
                "and apply operation again (with next pairs in the stack)
                call s:ApplyPairs()
            elseif s:type == 'v'
                "if operation was success then save state (selection & symbol)
                "this state will be used for NextPairs operation
                let s:laststop = stop
                let s:lastselected = s:GetSelection()
            endif
        elseif s:line > 1 && s:start_line - s:line < g:smartpairs_maxdepth
            "if we nothing found in the stack 
            "or current symbol is closed e.g. ), ], }
            "then extend stack with line above current line
            let s:line = s:line - 1
            call s:SmartPairs(s:type, s:mod, s:line)
        elseif len(s:stops) > 0
            "if we can't extend stack anymore
            "but we have some symbols in the stack
            "then remove last blocker symbol from stack and
            "run ApplyPairs again
            call s:RemoveLastFromStack()
            call s:ApplyPairs()
        endif
    catch
    endtry
endfunction

"apply next pairs from stack for current selection (extend selection)
"warning: this function is used only for selection mode (virtual)
"this command can be used with flag 'i' or 'a' its work like vi or va
"if no flag is given then previous selection flag is used or flag 'i'
"will be used for new selection 
function! s:NextPairs(...)
    "check flags from params
    if a:0 > 0
        let s:mod = a:1
    endif
    "get current selection
    let selected = s:GetSelection()

    "if we run NextPairs from SmartPairs/NextPairs then run next selection
    if exists('s:lastselected') && s:lastselected == selected
        let stop = s:laststop
        call s:GoTo(stop.line, stop.col)
        call s:ApplyCommand('v', s:mod, stop.symbol)
        call s:ApplyPairs()
    else
        "else run new selection for current line
        let mod = a:0 > 0 ? a:1 : 'i'
        call s:SmartPairs('v', mod)
    endif
endfunction

"define commands for vim (for internal tests)
command! -nargs=1 SmartPairsI call s:SmartPairs(<f-args>, 'i')
command! -nargs=1 SmartPairsA call s:SmartPairs(<f-args>, 'a')
command! NextPairs  call s:NextPairs()
command! NextPairsI call s:NextPairs('i')
command! NextPairsA call s:NextPairs('a')

"keymappings
"mapping for first run (found first pairs run command)
if !exists('g:smartpairs_key')
    let g:smartpairs_key = 'v'
end
for type in ['v', 'd', 'c', 'y']
    for mod in ['i', 'a']
        let cmd = 'nnoremap <silent> ' . type . mod . g:smartpairs_key . '  :<C-U>call <SID>SmartPairs("' . type . '", "' . mod .'")<CR>'
        if type == 'c' 
            let cmd .= 'a'
        endif
        silent exec cmd
    endfor
endfor

"mapping for next pairs (only for selection mode)
if !exists('g:smartpairs_nextpairs_key')
    let g:smartpairs_nextpairs_key = 'v'
end
silent exec 'vnoremap <silent> ' . g:smartpairs_nextpairs_key . ''
